# AWSTemplateFormatVersion: '2010-09-09'
# Description: >
#   Udagram Network Stack
#   Builds a VPC environment with public and private subnets, route tables,
#   and an Internet Gateway — designed for ALB + AutoScaling deployment.

# Parameters:
#   ProjectName:
#     Type: String
#     Description: A prefix name applied to all networking resources.

#   VpcCidrBlock:
#     Type: String
#     Default: 10.0.0.0/16
#     Description: CIDR range for the main VPC.

#   PublicSubnet1Range:
#     Type: String
#     Default: 10.0.1.0/24
#   PublicSubnet2Range:
#     Type: String
#     Default: 10.0.2.0/24
#   PrivateSubnet1Range:
#     Type: String
#     Default: 10.0.3.0/24
#   PrivateSubnet2Range:
#     Type: String
#     Default: 10.0.4.0/24

# Resources:
#   ##########################################
#   # VPC AND INTERNET GATEWAY
#   ##########################################
#   MainVPC:
#     Type: AWS::EC2::VPC
#     Properties:
#       CidrBlock: !Ref VpcCidrBlock
#       EnableDnsSupport: true
#       EnableDnsHostnames: true
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-main-vpc"

#   InternetGW:
#     Type: AWS::EC2::InternetGateway
#     Properties:
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-igw"

#   AttachInternetGW:
#     Type: AWS::EC2::VPCGatewayAttachment
#     Properties:
#       InternetGatewayId: !Ref InternetGW
#       VpcId: !Ref MainVPC

#   ##########################################
#   # PUBLIC SUBNETS
#   ##########################################
#   PublicSubnetA:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref MainVPC
#       CidrBlock: !Ref PublicSubnet1Range
#       MapPublicIpOnLaunch: true
#       AvailabilityZone: !Select [0, !GetAZs '']
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-public-subnet-a"

#   PublicSubnetB:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref MainVPC
#       CidrBlock: !Ref PublicSubnet2Range
#       MapPublicIpOnLaunch: true
#       AvailabilityZone: !Select [1, !GetAZs '']
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-public-subnet-b"

#   ##########################################
#   # PRIVATE SUBNETS
#   ##########################################
#   PrivateSubnetA:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref MainVPC
#       CidrBlock: !Ref PrivateSubnet1Range
#       AvailabilityZone: !Select [0, !GetAZs '']
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-private-subnet-a"

#   PrivateSubnetB:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref MainVPC
#       CidrBlock: !Ref PrivateSubnet2Range
#       AvailabilityZone: !Select [1, !GetAZs '']
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-private-subnet-b"

#   ##########################################
#   # ROUTE TABLES AND ASSOCIATIONS
#   ##########################################
#   PublicRT:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref MainVPC
#       Tags:
#         - Key: Name
#           Value: !Sub "${ProjectName}-public-rt"

#   DefaultPublicRoute:
#     Type: AWS::EC2::Route
#     DependsOn: AttachInternetGW
#     Properties:
#       RouteTableId: !Ref PublicRT
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGW

#   PublicSubnetARoute:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       SubnetId: !Ref PublicSubnetA
#       RouteTableId: !Ref PublicRT

#   PublicSubnetBRoute:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       SubnetId: !Ref PublicSubnetB
#       RouteTableId: !Ref PublicRT

# ##########################################
# # OUTPUTS — FOR REUSE IN OTHER STACKS
# ##########################################
# Outputs:
#   VpcId:
#     Description: ID of the created VPC
#     Value: !Ref MainVPC
#     Export:
#       Name: !Sub "${ProjectName}-VPCID"

#   PublicSubnets:
#     Description: List of public subnets (comma-separated)
#     Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
#     Export:
#       Name: !Sub "${ProjectName}-PublicSubnets"

#   PrivateSubnets:
#     Description: List of private subnets (comma-separated)
#     Value: !Join [",", [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
#     Export:
#       Name: !Sub "${ProjectName}-PrivateSubnets"




AWSTemplateFormatVersion: '2010-09-09'
Description: Udagram - Network Stack

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for public subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for public subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for private subnet 1
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for private subnet 2
    Type: String
    Default: 10.0.4.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-RT-1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-RT-2

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC-ID

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-Public-Subnets

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-Private-Subnets
